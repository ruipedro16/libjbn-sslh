require "../../../bn/amd64/ref/bn_generic.jinc"
require "fp_param.jinc"

/* CONDITIONAL-ADD-P */
inline fn __fp_caddP(#secret reg bool cf, reg ptr u64[NLIMBS] x) -> reg ptr u64[NLIMBS] {
    inline int i;
    #secret reg u64 t t0;
    #secret stack u64[NLIMBS] _tmp;
    reg ptr u64[NLIMBS] tmp;
    reg ptr u64[NLIMBS] glob_pp;

    glob_pp = glob_p;
    _tmp = __bn_copy(glob_pp);

    t0 = 0;
    for i = 0 to NLIMBS {
        t = _tmp[i];
        t = t0 if !cf;
        _tmp[i] = t;
    }

    tmp = _tmp;
    _, x = __bn_addc( x, tmp );

    return x;
}

/* x-P if P<=x else x */
inline fn __fp_cminusP(reg ptr u64[NLIMBS] x) -> reg ptr u64[NLIMBS] {
    inline int i;
    #secret reg bool _cf;
    #secret stack u64[NLIMBS] _tmp;
    reg ptr u64[NLIMBS] tmp;
    reg ptr u64[NLIMBS] glob_mpp;

    _tmp = __bn_copy(x);
    tmp = _tmp;
    glob_mpp = glob_mp;
    _cf, tmp = __bn_addc(tmp, glob_mpp);

    x = __bn_cmov(_cf, x, tmp);
    return x;
}

inline fn __fp_add(reg ptr u64[NLIMBS] a b) -> reg ptr u64[NLIMBS] {
    _, a = __bn_addc(a, b);
    a = __fp_cminusP(a);
    return a;
}

/* Modular addition */
#[returnaddress="stack"]
#nomodmsf fn _fp_add(reg ptr u64[NLIMBS] a b) -> reg ptr u64[NLIMBS] {
    //a = a; //ws
    a = __fp_add(a, b);
    return a;
}

inline fn _fp_add_(reg mut ptr u64[NLIMBS] a b) -> reg ptr u64[NLIMBS]
{
  a = a;
  b = b;
  a = _fp_add(a, b);
  a = a;
  return a;
}

inline fn __fp_sub(reg ptr u64[NLIMBS] a b) -> reg ptr u64[NLIMBS] {
    #secret reg bool cf;
    cf, a = __bn_subc(a, b);
    a = __fp_caddP(cf, a);
    return a;
}

#[returnaddress="stack"]
#nomodmsf fn _fp_sub(reg ptr u64[NLIMBS] a b) -> reg ptr u64[NLIMBS] {
    a = a; //ws
    a = __fp_sub(a, b);
    return a;
}

#nomodmsf fn _fp_sub_(reg ptr u64[NLIMBS] a b) -> reg ptr u64[NLIMBS] {
  a = a;
  a = _fp_sub(a, b);
  a = a;
  return a;
}

inline fn __fp_rdcn(reg ptr u64[2 * NLIMBS] a, reg ptr u64[NLIMBS] r) -> reg ptr u64[NLIMBS] {
    reg ptr u64[NLIMBS] glob_pp;
    inline int k;
    #secret reg bool cf;
    #secret reg u64 t t0 t1 zero u0r p0;
    #secret reg u64[3] x;

    _, _, _, _, _, zero = #set0(); 
    u0r = glob_u0;
    p0 = glob_p[0];

    _, _, _, _, _, x[0] = #set0();
    _, _, _, _, _, x[1] = #set0();
    _, _, _, _, _, x[2] = #set0();

    for k = 0 to NLIMBS {
        glob_pp = glob_p;
        x = __muln_innerloop(k, 0, k, r, glob_pp, x);
        t0 = a[k];
        x = __addacc3(zero, t0, x, k);
        t0 = x[k % 3];
        _, t0 = t0 * u0r;
        r[k] = t0;
        t1, t0 = t0 * p0;
        x = __addacc3(t1, t0, x, k);
    }

    for k = NLIMBS to 2 * NLIMBS - 1 {
        glob_pp = glob_p;
        x = __muln_innerloop(k, k - NLIMBS + 1, NLIMBS, r, glob_pp, x);
        t0 = a[k];
        x = __addacc3(zero, t0, x, k);
        t0 = x[k % 3];
        r[k-NLIMBS] = t0;
        _, _, _, _, _, x[k % 3] = #set0();
    }

    x[(2 * NLIMBS-1) % 3] += a[2 * NLIMBS-1];
    r[NLIMBS - 1] = x[(2 * NLIMBS - 1) % 3];

    r = __fp_cminusP(r);
    return r;
}

#[returnaddress="stack"]
#nomodmsf fn _fp_mul(reg ptr u64[NLIMBS] a b r) -> reg ptr u64[NLIMBS] {
    #secret stack u64[2 * NLIMBS] _tmp;
    reg ptr u64[2 * NLIMBS] tmp;

    r = r; //ws
    tmp = _tmp;
    tmp = __bn_muln(a, b, tmp);
    r = __fp_rdcn(tmp, r);
    return r;
}

// inline fn _fp_mul_(reg mut ptr u64[NLIMBS] a b r) -> reg ptr u64[NLIMBS] {
//     b = b;
//     r = _fp_mul(a, b, r);
//     r = r;
//     return r;
// }

// update inplace
#[returnaddress="stack"]
#nomodmsf fn _fp_mulU(reg ptr u64[NLIMBS] a b) -> reg ptr u64[NLIMBS] {
    stack u64[2 * NLIMBS] _tmp;
    reg ptr u64[2 * NLIMBS] tmp;

    a = a; //ws
    tmp = _tmp;
    tmp = __bn_muln(a, b, tmp);
    a = __fp_rdcn(tmp, a);
    return a;
}

inline fn _fp_sqr(reg ptr u64[NLIMBS] a r) -> reg ptr u64[NLIMBS] {
    #secret stack u64[2 * NLIMBS] _tmp;
    reg ptr u64[2 * NLIMBS] tmp;

    r = r; //ws
    tmp = _tmp;
    tmp = __bn_sqrn(a, tmp);
    r = __fp_rdcn(tmp, r);
    return r;
}

// update inplace
#[returnaddress="stack"]
#nomodmsf fn _fp_sqrU(reg ptr u64[NLIMBS] a) -> reg ptr u64[NLIMBS] {
    #secret stack u64[2 * NLIMBS] _tmp;
    reg ptr u64[2 * NLIMBS] tmp;

    a = a; //ws
    tmp = _tmp;
    tmp = __bn_sqrn(a, tmp);
    a = __fp_rdcn(tmp, a);
    return a;
}

/* 
 * Modular exponentiation
 * obs: naive square-multiply algorithm. Not Constant-Time!!!
 * (good enough for use with public exponents, such as in inversion) 
 */
#[returnaddress="stack"]
fn _fp_exp(reg ptr u64[NLIMBS] a _b r,
           #msf reg u64 ms) -> reg ptr u64[NLIMBS], #msf reg u64 {    
    #secret stack u64[NLIMBS] _x;

    reg ptr u64[NLIMBS] x;
    reg ptr u64[NLIMBS] glob_oneMp;

    stack ptr u64[NLIMBS] glob_oneMps;

    stack ptr u64[NLIMBS] rr bb; // used to spill r and _b
    reg ptr u64[NLIMBS] b;

    inline int j k;
    #public reg bool cf;
    #public reg u64 t;

    x = _x;

    glob_oneMp = glob_oneM;

    x = __bn_copy2(a, x);
    r = __bn_copy2(glob_oneMp, r);

    _x = x;

    bb = _b;
    rr = r;

    for j = 0 to NLIMBS {
        b = bb;
        b = #protect_ptr(b, ms);

        t = b[(int) j];
        t = #protect(t, ms);

        for k = 64 downto 0 {
            
            _, cf, _, _, _, t = #SHR(t, 1);

            if (cf) {
                ms = #update_msf(cf, ms);

                r = rr;
                r = #protect_ptr(r, ms);

                x = _x; //w
                x = #protect_ptr(x, ms);

                r = _fp_mulU(r, x);
                _x = x; //w
                rr = r;
            } else { ms = #update_msf(!cf, ms); }
            
            x = _x; //w
            x = _fp_sqrU(x);
            _x = x; //w
        }
    }

    r = rr;
    r = #protect_ptr(r, ms);
    
    return r, ms;
}

/* Modular Inversion */
inline fn __fp_inv(reg ptr u64[NLIMBS] a r,
                   #msf reg u64 ms) 
                -> reg ptr u64[NLIMBS], #msf reg u64 {
  /* a^{p-2} */
  reg ptr u64[NLIMBS] glob_pm2p;
  glob_pm2p = glob_pm2;
  r, ms = _fp_exp(a, glob_pm2p, r, ms);
  return r, ms;
}

/* 
 * Conversion into Montgomery form 
 */
#nomodmsf fn _fp_toM(reg ptr u64[NLIMBS] a) -> reg ptr u64[NLIMBS] {
    reg ptr u64[NLIMBS] glob_rMp;

    a = a; //ws;
    glob_rMp = glob_rM;
    a = _fp_mulU(a, glob_rMp);
    return a;
}

/* 
 * Conversion out from Montgomery form 
 */
#nomodmsf fn _fp_fromM(reg ptr u64[NLIMBS] a ) -> reg ptr u64[NLIMBS] {
    #secret stack u64[2 * NLIMBS] _tmp;
    reg ptr u64[2 * NLIMBS] tmp;
    #secret reg u64 t;
    inline int i;

    a = a; //ws;

    for i = 0 to NLIMBS {
        _tmp[NLIMBS + i] = 0;
    }

    for i = 0 to NLIMBS {
        t = a[i];
        _tmp[i] = t;
    }

    tmp = _tmp;
    a = __fp_rdcn(tmp, a);
    return a;
}
